apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"

version = "${mod_version}${getBuildNumber()}-mc${mc_version}"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8"

configurations {
    compileProject
    compile.extendsFrom compileProject
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

minecraft {
    mappings channel: mcp_channel, version: mcp_version
    runs {
        client {
            workingDirectory project.file("run/client")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            jvmArgs "-Xmx6G", "-Xms4G"
            mods {
                conquest {
                    source sourceSets.test
                }
            }
        }
        server {
            workingDirectory project.file("run/server")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            jvmArgs "-Xmx6G", "-Xms4G"
            mods {
                conquest {
                    source sourceSets.test
                }
            }
        }
    }
}

// copies the module's classes to the test folder
task prepareRunClasses(type: Copy) {
    from("$buildDir/classes/java/main")
    into("$buildDir/classes/java/test")
}

// copies the module's resources to the test folder
task prepareRunResources(type: Copy) {
    from("$buildDir/resources/main")
    into("$buildDir/resources/test")
}

// copies the module's dependency classes to the test folder
task prepareRunDeps(type: Copy) {
    from { configurations.compileProject.collect { it.isDirectory() ? it : zipTree(it) } }
    into("build/classes/java/test")
}

// collects the test classes/resources for the run config
testClasses {
    dependsOn(prepareRunDeps, prepareRunClasses, prepareRunResources)
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : project.name,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : project.name,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

static def getBuildNumber() {
    def buildNumber = System.getenv("BUILD_NUMBER")
    if (buildNumber == null) {
        return ""
    }
    return "-${buildNumber}"
}