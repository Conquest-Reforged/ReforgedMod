// copies the root project classes and then subproject classes into the test dir
task prepareMainRunClasses(type: Copy) {
    duplicatesStrategy = "EXCLUDE"
    from("$buildDir/classes/java/main")
    subprojects.each { project -> from fileTree("$project.buildDir/classes/java/main") }
    into("$buildDir/classes/java/test")
}

// copies the root project resources and then subproject resources into the test dir
task prepareMainRunResources(type: Copy) {
    duplicatesStrategy = "EXCLUDE"
    from("$buildDir/resources/main")
    subprojects.each { project -> from fileTree("$project.buildDir/resources/main") }
    into("$buildDir/resources/test")
}

// merges all project deobf"d jars into a single temporary jar (reobf task happens afterwards)
task mergeJar(dependsOn: subprojects.tasks["jar"], type: Jar) {
    // zip64 is critical for big jars
    zip64 true
    classifier "merge"
    duplicatesStrategy = "EXCLUDE"
    from zipTree(jar.archivePath)
    from fileTree("$projectDir/src/generated/resources") { exclude "**/.cache/**" }
    subprojects.each { project -> from zipTree(project.jar.archivePath) }
}

// renames the temporary "merge" jar to the normal project jar
task renameJar(type: Sync) {
    from mergeJar.archivePath
    destinationDir mergeJar.destinationDir
    rename mergeJar.archiveName, jar.archiveName
}

// processes the mods toml applying version info etc
processResources {
    filesMatching("**/mods.toml") {
        expand(
                "name": project.name,
                "version": mod_version,
                "mc_version": mc_version
        )
    }
}

// collects the test classes/resources for the run config
testClasses {
    // do modules first
    dependsOn(dependsOn: subprojects.tasks["classes"])
    // collect for the root project
    finalizedBy(prepareMainRunClasses, prepareMainRunResources)
}

minecraft {
    runs {
        data {
            workingDirectory project.file("run/data")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property "fml.earlyprogresswindow", "false"
            args "--mod", "conquest", "--all", "--output", file("src/generated/resources/")
            jvmArgs "-Xmx4G", "-Xms2G"
            mods {
                conquest {
                    source sourceSets.test
                }
            }
        }
    }
}