// copies the root project classes and then subproject classes into the test dir
task prepareMainRunClasses(type: Copy) {
    duplicatesStrategy = "EXCLUDE"
    from("$buildDir/classes/java/main")
    subprojects.each { project -> from fileTree("$project.buildDir/classes/java/main") }
    into("$buildDir/classes/java/test")
}

// copies the root project resources and then subproject resources into the test dir
task prepareMainRunResources(type: Copy) {
    duplicatesStrategy = "EXCLUDE"
    from("$buildDir/resources/main")
    subprojects.each { project -> from fileTree("$project.buildDir/resources/main") }
    into("$buildDir/resources/test")
}

// merges all projects' deobf'd jars into a single temporary jar (reobf task happens afterwards)
task mergeJar(dependsOn: subprojects.tasks["jar"], type: Jar) {
    classifier "merge"
    duplicatesStrategy = "EXCLUDE"
    from zipTree(jar.archivePath)
    subprojects.each { project -> from zipTree(project.jar.archivePath)}
}

// renames the temporary 'merge' jar to the normal project jar
task renameJar(type: Sync) {
    from mergeJar.archivePath
    destinationDir mergeJar.destinationDir
    rename mergeJar.archiveName, jar.archiveName
}

// creates a new fat jar containing the reobf'd project jar and the resource pack
task allInOneJar(type: Jar) {
    classifier = "AllInOne"
    duplicatesStrategy = "EXCLUDE"
    from zipTree(jar.archivePath)
    from fileTree("ReforgedRP") {
        exclude "TO_BE_ADDED", "to_be_added", "**.ini", "**.md", "pack.mcmeta"
    }
}

// processes the mods toml applying version info etc
processResources {
    filesMatching("**/mods.toml") {
        expand(
                "name": project.name,
                "version": mod_version,
                "mc_version": mc_version
        )
    }
}

// collects the test classes/resources for the run config
testClasses {
    dependsOn(prepareMainRunClasses, prepareMainRunResources)
}